package com.salvadormontiel.cable.compiler.writer;

import com.salvadormontiel.cable.CableRequest;
import com.salvadormontiel.cable.Component;
import com.salvadormontiel.cable.compiler.Registry;
import com.salvadormontiel.cable.compiler.element.ComponentElement;
import com.salvadormontiel.cable.compiler.element.WiredElement;
import com.salvadormontiel.cable.compiler.util.Util;
import com.salvadormontiel.cable.internal.AdapterHolder;
import com.salvadormontiel.cable.internal.ComponentAdapter;
import com.squareup.javapoet.*;

import javax.lang.model.element.Element;
import java.io.IOException;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Supplier;

import static javax.lang.model.element.Modifier.*;

/**
 * @author Salvador Montiel
 */
public class AdapterHolderWriter implements SourceWriter<Element> {
    private final Registry registry;

    public AdapterHolderWriter(Registry registry) {
        this.registry = registry;
    }

    @Override
    public String createSourceName(Element element) {
        return AdapterHolder.IMPL_CLASS_FQCN;
    }

    @Override
    public void writeSource(Writer writer, Element element) throws IOException {
        WildcardTypeName modelWildcard = WildcardTypeName.subtypeOf(TypeName.get(Component.class));
        TypeName classType = ParameterizedTypeName.get(ClassName.get(Class.class), modelWildcard);

        TypeName modelAdapterClassName = ClassName.get(Component.class);
        TypeName classTypeName = ParameterizedTypeName.get(ClassName.get(Supplier.class), modelAdapterClassName);
        TypeName mapTypeName = ParameterizedTypeName.get(ClassName.get(Map.class), ClassName.get(String.class), classTypeName);
        TypeSpec typeSpec = TypeSpec.classBuilder(AdapterHolder.IMPL_CLASS_NAME)
            .addModifiers(PUBLIC, FINAL)
            .addSuperinterface(AdapterHolder.class)
            .addField(FieldSpec.builder(mapTypeName, "COMPONENT_ADAPTERS", PRIVATE, STATIC, FINAL)
                .initializer("new $T<>()", HashMap.class)
                .build()
            )
            .addMethod(constructor())
            .addMethod(getComponentAdapterMethod())
            .build();

        JavaFile javaFile = JavaFile
            .builder(AdapterHolder.IMPL_CLASS_PACKAGE, typeSpec)
            .addFileComment("Generated by Cable. Do not modify!")
            .indent("    ")
            .build();
        javaFile.writeTo(writer);
    }

    private MethodSpec constructor() {
        MethodSpec.Builder mb = MethodSpec.constructorBuilder().addModifiers(PUBLIC);
        registry.getComponentElements()
                .forEach(c -> {
                    mb.addStatement("COMPONENT_ADAPTERS.put($S, new $T<Component>() {\n" +
                                    "@Override\n" +
                                    "public Component get() {\n" +
                                    "    return new $T(new $L());\n" +
                                    "}})", c.getComponentName(),
                            ClassName.get(Supplier.class),
                            ClassName.get(c.getComponentPackage(), c.getComponentClassName()),
                            c.getComponentClassName() + Util.getComponentSuffix());
                });
        return mb.build();
    }

    private MethodSpec getComponentAdapterMethod() {
        ParameterSpec param = ParameterSpec.builder(ClassName.get(String.class), "component").build();
//        TypeName returns = ParameterizedTypeName.get(ClassName.get(ComponentAdapter.class), TypeVariableName.get("T"));
        TypeName returns = TypeVariableName.get("T");
        return MethodSpec.methodBuilder("getComponent")
                .addModifiers(PUBLIC)
                .addParameter(param)
                .addStatement("Supplier<Component> supplier = COMPONENT_ADAPTERS.get(component)")
                .addStatement("if (supplier == null) return null")
                .addStatement("return (T) supplier.get()")
                .returns(returns)
                .addTypeVariable(TypeVariableName.get("T", Component.class))
                .build();
    }
}
